{"version":3,"sources":["store/actions/actionTypes.js","store/reducers/auth.js","store/reducers/index.js","store/index.js","components/LoginButtons.js","components/Layout/Header.js","components/Layout/Layout.js","components/SongTitleCard.js","components/LyricsCard.js","components/SongDisplay.js","components/HomePage.js","components/LoginCallbackHandler.js","store/actions/auth.js","App.js","serviceWorker.js","index.js"],"names":["types","auth","SPOTIFY_LOGIN_SUCCESS","SPOTIFY_LOGIN_FAILURE","GENIUS_LOGIN_SUCCESS","GENIUS_LOGIN_FAILURE","initialState","spotifyLoggedIn","spotifyToken","spotifyExpiry","geniusLoggedIn","geniusToken","authReducer","state","action","type","now","Date","Math","round","getTime","parseInt","payload","combineReducers","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","f","mapStateToProps","buttonStyle","margin","GeniusLoginButton","connect","loginURL","process","style","className","onClick","location","href","disabled","SpotifyLoginButton","Header","padding","Layout","children","SongTitleCard","song","album","item","images","artistName","artists","name","albumName","songName","coverImgUrl","url","maxWidth","marginLeft","marginRight","marginBottom","textAlign","height","width","alignSelf","marginTop","display","borderRadius","src","alt","paddingRight","icon","faUser","faRecordVinyl","LyricsCard","lyrics","isLyricsLoading","role","whiteSpace","fontSize","useState","setLyrics","prevSongId","setPrevSongId","setLyricsLoading","useEffect","id","document","title","axios","get","then","res","data","meta","status","response","hits","result","useLyrics","currentTrack","setCurrentTrack","setInterval","headers","catch","err","console","log","useCurrentTrack","LoginCallbackHandler","handlerFunc","redirect","hash","to","tryLocalSpotifyAuth","dispatch","authJSON","localStorage","getItem","spotifyResponse","JSON","parse","tryLocalGeniusAuth","doSpotifyLogin","hashFragment","qs","error","setItem","stringify","doGeniusLogin","geniusResponse","App","exact","path","component","HomePage","render","props","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a43327dd.chunk.js","sourcesContent":["const types = {\n    auth: {\n        SPOTIFY_LOGIN_SUCCESS: 'SPOTIFY_LOGIN_SUCCESS',\n        SPOTIFY_LOGIN_FAILURE: 'SPOITFY_LOGIN_FAILURE',\n        GENIUS_LOGIN_SUCCESS: 'GENIUS_LOGIN_SUCCESS',\n        GENIUS_LOGIN_FAILURE: 'GENIUS_LOGIN_FAILURE'\n    }\n}\n\nexport default types","import types from '../actions/actionTypes'\n\nconst initialState = {\n    spotifyLoggedIn: false,\n    spotifyToken: null,\n    spotifyExpiry: null,\n    geniusLoggedIn: false,\n    geniusToken: null,\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch(action.type){\n        case types.auth.SPOTIFY_LOGIN_SUCCESS:\n            const now = new Date()\n            const spotifyExpiry = Math.round(now.getTime()/1000) + parseInt(action.payload['expires_in'])\n\n            return {\n                ...state,\n                spotifyLoggedIn: true,\n                spotifyToken: action.payload['access_token'],\n                spotifyExpiry\n            }\n        case types.auth.SPOTIFY_LOGIN_FAILURE:\n            return {\n                ...state,\n                spotifyLoggedIn: false,\n                spotifyToken: null,\n                spotifyExpiry: null,\n            }\n        case types.auth.GENIUS_LOGIN_SUCCESS:\n            return {\n                ...state,\n                geniusLoggedIn: true,\n                geniusToken: action.payload['access_token'],\n            }\n        case types.auth.GENIUS_LOGIN_FAILURE:\n            return {\n                ...state,\n                geniusLoggedIn: false,\n                geniusToken: null,\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default authReducer","import {combineReducers} from 'redux'\nimport authReducer from './auth'\n\nexport default combineReducers({\n    auth: authReducer,\n})","import {createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f));\n\nexport default store;","import React from 'react'\nimport {connect} from 'react-redux'\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n})\n\nconst buttonStyle = {\n    margin: '0.5rem',\n}\n\nexport const GeniusLoginButton = connect(mapStateToProps, {})(\n    ({auth}) => {\n\n        const clientId = process.env.REACT_APP_GENIUS_CLIENT_ID\n        const redirectURI = process.env.REACT_APP_GENIUS_REDIRECT_URI\n        const scope = 'me'\n\n        const loginURL = `https://api.genius.com/oauth/authorize?response_type=token&client_id=${clientId}&redirect_uri=${redirectURI}&scope=${scope}`\n\n        const doRedirect = () => {\n            window.location.href = loginURL\n        }\n\n        return (\n            <button style={buttonStyle} className=\"btn btn-warning\" onClick={doRedirect} disabled={auth.geniusLoggedIn}>{(auth.geniusLoggedIn)?'Genius Connected':'Log in to Genius'}</button>\n        )\n    }\n)\n\nexport const SpotifyLoginButton = connect(mapStateToProps, {})(\n    ({auth}) => {\n\n        const spotifyClientId = process.env.REACT_APP_SPOTIFY_CLIENT_ID\n        const redirectURI = process.env.REACT_APP_SPOTIFY_REDIRECT_URI\n        const scope = 'user-read-playback-state'\n\n        const loginURL = `https://accounts.spotify.com/authorize?response_type=token&client_id=${spotifyClientId}&redirect_uri=${redirectURI}&scope=${scope}`\n\n        const doRedirect = () => {\n            window.location.href = loginURL\n        }\n\n        return (\n                <button style={buttonStyle} className=\"btn btn-success\" onClick={doRedirect} disabled={auth.spotifyLoggedIn}>{(auth.spotifyLoggedIn)?'Spotify Connected':'Log in to Spotify'}</button>\n        )\n    }\n)","import React from 'react'\nimport {SpotifyLoginButton, GeniusLoginButton} from '../LoginButtons'\n\nconst Header = () => {\n    const style = {\n        padding: '1rem',\n    }\n    return (\n        <nav className=\"navbar navbar-collapse-sm justify-content-between\" style={style}>\n                <h1 className=\"navbar-brand\">Spotify Lyrics</h1>\n        </nav>\n    )\n}\n\nexport default Header","import React from 'react'\nimport Header from './Header'\n\nconst Layout = ({children}) => {\n    return (\n        <>\n            <Header />\n\n            <main>\n                {children}\n            </main>\n        </>\n    )\n}\n\nexport default Layout","import React from 'react'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faRecordVinyl, faUser} from '@fortawesome/free-solid-svg-icons'\n\n\nexport default function SongTitleCard({song}) {\n\n    const album = song && song.item.album.images[1]\n    const artistName = song && song.item.artists[0].name;\n    const albumName = song && song.item.album.name\n    const songName = song && song.item.name\n    const coverImgUrl = album && album.url\n\n    const cardStyle = {\n        maxWidth: '25rem',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        marginBottom: '1rem'\n    }\n\n    const imgStyle = {\n        height: '200px',\n        width: '200px',\n        alignSelf: 'center',\n        marginTop: '20px',\n        display: 'block',\n        borderRadius: '5px',\n    }\n\n    return (\n            <div className=\"card text-white bg-secondary mb-3\" style={cardStyle}>\n                <div className=\"card-header\" style={{textAlign: 'left'}}>Now Playing</div>\n                <img style={imgStyle} src={coverImgUrl} alt=\"Card image\" />\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{songName}</h5>\n                    \n                    <h6 className=\"card-subtitle\">\n                        <FontAwesomeIcon style={{paddingRight: '0.25rem'}} icon={faUser} />\n                        {artistName}\n                    </h6>\n                    \n                    <h6 className=\"card-subtitle\" style={{marginTop: '0.3rem'}}>\n                        <FontAwesomeIcon style={{paddingRight: '0.25rem'}} icon={faRecordVinyl} />\n                        {albumName}\n                    </h6>\n                </div>\n            </div>\n    )\n}\n","import React from 'react'\n\nexport default function LyricsCard({lyrics}) {\n    const cardStyle = {\n        maxWidth: '25rem',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        marginBottom: '1rem'\n    }\n\n    const pStyle = {\n        whiteSpace: 'pre-wrap',\n        fontSize: '16px',\n    }\n    \n    return (\n        <div className=\"card mb-3\" style={cardStyle}>\n            <div className=\"card-header\" style={{textAlign: 'left'}}>Lyrics</div>\n            <div className=\"card-body\">\n                {lyrics.isLyricsLoading ?                         \n                    <div className=\"spinner-border text-warning\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>  \n                : \n                    <p style={pStyle}>{lyrics.lyrics}</p> \n                }\n            </div>\n        </div>\n    )\n}\n","import React, {useEffect, useState} from 'react'\nimport {connect} from 'react-redux'\nimport axios from 'axios'\nimport {SpotifyLoginButton, GeniusLoginButton} from './LoginButtons'\nimport SongTitleCard from './SongTitleCard'\nimport LyricsCard from './LyricsCard'\n\nconst useLyrics = (song, auth) => {\n\n    const [lyrics, setLyrics] = useState(null)\n    const [prevSongId, setPrevSongId] = useState(null)\n    const [isLyricsLoading, setLyricsLoading] = useState(false);\n\n    //Effect runs when song changes to update document title and fetch the lyrics \n    useEffect(() => {\n        if (auth && auth.geniusToken && song && song.item.id !== prevSongId){\n            setLyricsLoading(true);\n\n            document.title = `Spotify Lyrics | ${song.item.name} - ${song.item.artists[0].name}`\n\n            axios.get(`https://api.genius.com/search?q=${song.item.name}-${song.item.artists[0].name}&access_token=${auth.geniusToken}`)\n            .then((res)=>{\n                \n                if (res.data.meta.status === 200){\n                    setPrevSongId(song.item.id)\n                    if(res.data.response.hits[0] && res.data.response.hits[0].result){\n                        //Make request to backend service to search for genius lyrics\n                        const url = `/api/lyrics/${res.data.response.hits[0].result.id}?genius_token=${auth.geniusToken}`\n                        axios.get(url)\n                        .then(res => {\n                            setLyrics(res.data)\n                            setLyricsLoading(false)\n                        })\n                    } else {\n                        setLyrics('No results found for this track')\n                        setLyricsLoading(false)\n                    }\n                }\n            })\n        }\n    }, [song, auth])\n\n    return {\n        isLyricsLoading,\n        lyrics\n    }\n\n}\n\nconst SongDisplay = ({song, auth}) => {\n\n    const lyrics = useLyrics(song, auth);\n\n    return (\n        <div style={{textAlign: 'center'}}>\n\n            {auth.spotifyLoggedIn ? \n            <> \n                <SongTitleCard song={song} />\n            </> : \n            <> \n                <SpotifyLoginButton />\n            </>}\n\n            {auth.geniusLoggedIn ? \n            <> \n                {\n                    <LyricsCard lyrics={lyrics} />\n                }\n            </> : \n            <> \n                <GeniusLoginButton />\n            </>}\n        </div>\n    )\n}\n\nconst mapPropsToState = (state) => ({\n    auth: state.auth\n})\n\nexport default connect(mapPropsToState, {})(SongDisplay);","import React, {useEffect, useState, useDebugValue, createContext} from 'react'\nimport axios from 'axios'\nimport Layout from './Layout/Layout'\nimport {connect} from 'react-redux'\nimport SongDisplay from './SongDisplay'\n\nconst useCurrentTrack = auth => {\n\n        const [currentTrack, setCurrentTrack] = useState(null)\n        const [currentAlbum, setCurrentAlbum] = useState(null)\n\n        useEffect(() => {\n            setInterval(()=>{\n                if(auth.spotifyLoggedIn){\n                    axios\n                    .get('https://api.spotify.com/v1/me/player/currently-playing', {headers: {\n                    'Authorization': `Bearer ${auth.spotifyToken}`,\n                    'Content-Type': 'application/x-www-form-urlencoded',}})\n                        .then(res => {\n                            if(res.status === 200){\n                                if((currentTrack === null) || currentTrack.item.id !== res.data.item.id){\n                                    \n                                    //Store current track\n                                    setCurrentTrack(res.data)\n                                }\n                            }\n                        })\n                        .catch(err => console.log(err))\n                }\n            }, 1000);\n    }, [auth.spotifyLoggedIn])\n\n    return currentTrack;\n\n}\n\nconst HomePage = ({auth}) => {\n\n    const currentTrack = useCurrentTrack(auth);\n\n    return (\n        <Layout>\n            <SongDisplay song={currentTrack}/>}\n        </Layout>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n})\n\nexport default connect(mapStateToProps, {})(HomePage)\n","import React from 'react'\nimport {Redirect} from 'react-router-dom'\n\nconst LoginCallbackHandler = ({handlerFunc, redirect, location}) => {\n\n\n    handlerFunc(location.hash)\n\n    return (\n        <Redirect to={redirect} />\n    )\n}\n\nexport default LoginCallbackHandler\n","import types from './actionTypes'\nimport qs from 'query-string'\nimport axios from 'axios'\n\n// Handle login response from spotify API\n// \nexport const spotifyLogin = (hashFragment) => (dispatch) => {\n    const spotifyResponse = qs.parse(hashFragment)\n    console.log(spotifyResponse)\n\n    if(spotifyResponse.error){\n        dispatch({type: types.auth.SPOTIFY_LOGIN_FAILURE})\n    } else {\n        localStorage.setItem('spotify-auth', JSON.stringify(spotifyResponse))\n\n        dispatch({\n            type: types.auth.SPOTIFY_LOGIN_SUCCESS,\n            payload: spotifyResponse\n        })\n    }\n}\n\nexport const tryLocalSpotifyAuth = () => dispatch => {\n    \n    const authJSON = localStorage.getItem('spotify-auth')\n    \n    if (!authJSON) return null\n\n    const spotifyResponse = JSON.parse(authJSON)\n\n    axios\n        .get('https://api.spotify.com/v1/me', {\n                headers: {\n                    'Authorization': `Bearer ${spotifyResponse['access_token']}`,\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                }\n        })\n        .then(res => {\n            if(res.status === 200){\n                dispatch({\n                    type: types.auth.SPOTIFY_LOGIN_SUCCESS,\n                    payload: spotifyResponse\n                })\n            } else {\n                dispatch({type: types.auth.SPOTIFY_LOGIN_FAILURE})\n            }\n        })\n        .catch(err => {\n            console.log(err)\n            dispatch({type: types.auth.SPOTIFY_LOGIN_FAILURE})\n        })\n\n}\n\nexport const geniusLogin = (hashFragment) => dispatch => {\n    const geniusResponse = qs.parse(hashFragment)\n    console.log(geniusResponse)\n\n    if(geniusResponse.error){\n        dispatch({type: types.auth.GENIUS_LOGIN_FAILURE})\n    } else {\n        localStorage.setItem('genius-auth', JSON.stringify(geniusResponse))\n\n        dispatch({\n            type: types.auth.GENIUS_LOGIN_SUCCESS,\n            payload: geniusResponse\n        })\n    }\n}\n\nexport const tryLocalGeniusAuth = () => dispatch => {\n    \n    const authJSON = localStorage.getItem('genius-auth')\n    \n    if (!authJSON) return null\n\n    const response = JSON.parse(authJSON)\n\n    axios\n        .get(`https://api.genius.com/songs/378195?access_token=${response['access_token']}`)\n        .then(res => {\n            if(res.status === 200){\n                dispatch({\n                    type: types.auth.GENIUS_LOGIN_SUCCESS,\n                    payload: response\n                })\n            } else {\n                dispatch({type: types.auth.GENIUS_LOGIN_FAILURE})\n            }\n        })\n        .catch(err => {\n            console.log(err)\n            dispatch({type: types.auth.GENIUS_LOGIN_FAILURE})\n        })\n\n}","import React, {useEffect} from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport {Provider} from 'react-redux'\nimport store from './store'\n\nimport HomePage from './components/HomePage'\n\nimport LoginCallbackHandler from './components/LoginCallbackHandler';\nimport {spotifyLogin, geniusLogin, tryLocalSpotifyAuth, tryLocalGeniusAuth} from './store/actions/auth'\n\nconst doSpotifyLogin = (hash) => {\n  store.dispatch(spotifyLogin(hash))\n}\n\nconst doGeniusLogin = (hash) => {\n  store.dispatch(geniusLogin(hash))\n}\n\nfunction App() {\n\n  useEffect(() => {\n    store.dispatch(tryLocalSpotifyAuth())\n    store.dispatch(tryLocalGeniusAuth())\n  }, [])\n\n  return (\n      <Provider store={store}>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/callback-spotify\" render={(props)=><LoginCallbackHandler {...props} redirect='/' handlerFunc={doSpotifyLogin}/>} />\n          <Route path=\"/callback-genius\" render={(props)=><LoginCallbackHandler {...props} redirect='/' handlerFunc={doGeniusLogin}/>} />\n        </Switch>      \n      </BrowserRouter>\n      </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}